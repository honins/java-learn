@startmindmap
* 链表
** LRU(least recently used)
** 不需要连续的内存空间，通过指针将一组零散的内存块串联起来。
** 单链表
*** 每个内存块称为节点，每个结点记录数据和后继指针。头结点用来记录链表的基地址，尾结点的指针指向**空地址NULL**
*** 插入/删除时间复杂度O(1)，随机访问O(n)
** 循环链表
*** 特殊的单链表，唯一区别是尾结点后继指针指向头结点
** 双链表
*** 不仅有后继指针next还有前驱指针prev,比单链表占用更多空间
**** 空间换时间，插入删除可直接找到prev，更有优势
** 双向循环链表
** 写出链表代码
*** 1.理解指针或引用的含义，Java中指针理解为引用
*** 2.警惕指针丢失和内存泄漏。针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。
*** 3.利用哨兵简化编程难度（带头链表）
*** 4.重点留意边界条件处理
*** 5.举例和画图，辅助思考
** 链表常见操作
*** 单链表反转
*** 链表中环的检测
*** 两个有序的链表合并
*** 删除倒数第n个结点
*** 求链表的中间结点
@endmindmap